apiVersion: postgres-operator.crunchydata.com/v1beta1
kind: PostgresCluster
metadata:
  name: {{ template "crunchy-postgres.fullname" . }}
  labels: {{ include "crunchy-postgres.labels" . | nindent 4 }}
spec:
  metadata:
    labels: {{ include "crunchy-postgres.labels" . | nindent 6 }}
  {{ if .Values.crunchyImage }}
  image: {{ .Values.crunchyImage }}
  {{ end }}
  imagePullPolicy: {{.Values.imagePullPolicy}}
  postgresVersion: {{ .Values.postgresVersion }}
  {{ if .Values.postGISVersion }}
  postGISVersion: {{ .Values.postGISVersion | quote }}
  {{ end }}

  {{ if .Values.pgmonitor.enabled }}

  monitoring:
    pgmonitor:
      # this stuff is for the "exporter" container in the "postgres-cluster-ha" set of pods
      exporter:
        {{ if .Values.pgmonitor.exporter.image}}
        image: {{ .Values.pgmonitor.exporter.image}}
        {{ end }}
        resources:
          requests:
            cpu: {{ .Values.pgmonitor.exporter.requests.cpu }}
            memory: {{ .Values.pgmonitor.exporter.requests.memory }}
          limits:
            cpu: {{ .Values.pgmonitor.exporter.limits.cpu }}
            memory: {{ .Values.pgmonitor.exporter.limits.memory }}

  {{ end }}

  instances:
    - name: {{ .Values.instances.name }}
      replicas: {{ .Values.instances.replicas }}
      resources:
        requests:
          cpu: {{ .Values.instances.requests.cpu }}
          memory: {{ .Values.instances.requests.memory }}
        limits:
          cpu: {{ .Values.instances.limits.cpu }}
          memory: {{ .Values.instances.limits.memory }}
      sidecars:
        replicaCertCopy:
          resources:
            requests:
              cpu: {{ .Values.instances.replicaCertCopy.requests.cpu }}
              memory: {{ .Values.instances.replicaCertCopy.requests.memory }}
            limits:
              cpu: {{ .Values.instances.replicaCertCopy.limits.cpu }}
              memory: {{ .Values.instances.replicaCertCopy.limits.memory }}
      dataVolumeClaimSpec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: {{ .Values.instances.dataVolumeClaimSpec.storage }}
        storageClassName: {{ .Values.instances.dataVolumeClaimSpec.storageClassName }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                topologyKey: topology.kubernetes.io/zone
                labelSelector:
                  matchLabels:
                    postgres-operator.crunchydata.com/cluster:
                      {{ template "crunchy-postgres.fullname" . }}
                    postgres-operator.crunchydata.com/instance-set: {{ .Values.instances.name }}-ha
  
  users:
    - name: {{ template "crunchy-postgres.fullname" . }}
      databases:
        - {{ template "crunchy-postgres.fullname" . }}
      options: "CREATEROLE"
    - name: postgres
      databases:
        - {{ template "crunchy-postgres.fullname" . }}

  {{ if .Values.dataSource.enabled }}
  dataSource:
    pgbackrest:
      configuration:
        - secret:
            name: {{ .Values.dataSource.secretName }}
      global:
        repo2-path: {{ .Values.dataSource.repo.path }}
      repo:
        name: {{ .Values.dataSource.repo.name }}
        s3:
          bucket: {{ .Values.dataSource.repo.s3.bucket }}
          endpoint: {{ .Values.dataSource.repo.s3.endpoint }}
          region: {{ .Values.dataSource.repo.s3.region }}
      stanza: {{ .Values.dataSource.stanza }}
  {{ end }}
  
  backups:
    pgbackrest:
      {{ if .Values.pgBackRest.image }}
      image: {{ .Values.pgBackRest.image | quote }}
      {{ end }}
      {{ if eq $.Values.pgBackRest.s3.enabled true }}
      configuration:
      - secret:
          name: {{ .Values.pgBackRest.s3.s3Secret | quote }}
      {{ end }}
      global:
      {{ range $repo := .Values.pgBackRest.repos }}
        {{ if eq $.Values.pgBackRest.s3.enabled true }}
          {{ $repo.name }}-s3-bucket: {{ $repo.s3.bucket }}
          {{ $repo.name }}-s3-endpoint: {{ $repo.s3.endpoint }}
          {{ $repo.name }}-s3-key: {{ $repo.s3.key }}
          {{ $repo.name }}-s3-key-secret: {{ $repo.s3.keySecret }}
          {{ if .s3.region }}
            {{ $repo.name }}-s3-region: {{ $repo.s3.region }}
          {{ end }}
          {{ if $repo.s3.uriStyle }}
            {{ $repo.name }}-s3-uri-style: {{ $repo.s3.uriStyle }}
          {{ end }}
          {{ if $repo.path }}
            {{ $repo.name }}-path: {{ $repo.path }}
          {{ end }}
        {{ end }}
        {{ range $schedule := $repo.schedules }}
        {{ if eq $schedule.type "full" }}
        {{ $repo.name }}-retention-full-type: {{ $schedule.retentionPolicy }}  
        {{ $repo.name }}-retention-full: {{ $schedule.retentionLimit | quote }}
        {{ end }}
        {{ if eq $schedule.type "differential" }}
        {{ $repo.name }}-retention-diff: {{ $schedule.retentionLimit | quote }}
        {{ end }}
        {{ if eq $schedule.type "incremental" }}
        {{ $repo.name }}-retention-archive: {{ $schedule.retentionLimit | quote }}
        {{ end}}
        {{ end }}
      {{ end }}
      repos:
        {{ range $repo := .Values.pgBackRest.repos }}
        - name: {{ $repo.name }}
          {{ if $repo.volume }}
          volume:
            volumeClaimSpec:
              accessModes: {{ toYaml $repo.volume.accessModes | nindent 14 }}
              resources:
                requests:
                  storage: {{ $repo.volume.storage | quote }}
              {{ if $repo.volume.storageClassName }}
              storageClassName: {{ $repo.volume.storageClassName | quote }}
              {{ end }}
          {{ end }}
          {{ if $repo.s3 }}
          s3:
            bucket: {{ $repo.s3.bucket | quote }}
            endpoint: {{ $repo.s3.endpoint | quote }}
            {{ if $repo.s3.region }}
            region: {{ $repo.s3.region | quote }}
            {{ end }}
          {{ end }}
          {{ if $repo.schedules }}
          schedules:
            {{ range $type, $schedule := .schedules }}
            {{ $schedule.type }}: {{ $schedule.schedule }}
            {{ end }}
          {{ end }}
        {{ end }}
      # this stuff is for the "pgbackrest" container (the only non-init container) in the "postgres-crunchy-repo-host" pod
      repoHost:
        resources:
          requests:
            cpu: {{ .Values.pgBackRest.repoHost.requests.cpu }}
            memory: {{ .Values.pgBackRest.repoHost.requests.memory }}
          limits:
            cpu: {{ .Values.pgBackRest.repoHost.limits.cpu }}
            memory: {{ .Values.pgBackRest.repoHost.limits.memory }}
      sidecars:
        # this stuff is for the "pgbackrest" container in the "postgres-crunchy-ha" set of pods
        pgbackrest:
          resources:
            requests:
              cpu: {{ .Values.pgBackRest.sidecars.requests.cpu }}
              memory: {{ .Values.pgBackRest.sidecars.requests.memory }}
            limits:
              cpu: {{ .Values.pgBackRest.sidecars.limits.cpu }}
              memory: {{ .Values.pgBackRest.sidecars.limits.memory }}
        pgbackrestConfig:
          resources:
            requests:
              cpu: {{ .Values.pgBackRest.sidecars.requests.cpu }}
              memory: {{ .Values.pgBackRest.sidecars.requests.memory }}
            limits:
              cpu: {{ .Values.pgBackRest.sidecars.limits.cpu }}
              memory: {{ .Values.pgBackRest.sidecars.limits.memory }}
  standby:
    enabled: {{ .Values.standby.enabled }}
    repoName: {{ .Values.standby.repoName }}
  
  patroni:
    dynamicConfiguration:
      postgresql:
        pg_hba:
          - {{ .Values.patroni.postgresql.pg_hba}}
        parameters:
          shared_buffers: {{ .Values.patroni.postgresql.parameters.shared_buffers }}
          wal_buffers: {{ .Values.patroni.postgresql.parameters.wal_buffers }}
          min_wal_size: {{ .Values.patroni.postgresql.parameters.min_wal_size }}
          max_wal_size: {{ .Values.patroni.postgresql.parameters.max_wal_size }}
          max_slot_wal_keep_size:  {{ .Values.patroni.postgresql.parameters.max_slot_wal_keep_size }}
          timezone: {{ .Values.patroni.postgresql.parameters.timezone}}
  
  proxy:
    pgBouncer:
      config:
        global:
          client_tls_sslmode: disable
      {{ if .Values.proxy.pgBouncer.image }}
      image: {{ .Values.proxy.pgBouncer.image }}
      {{ end }}
      replicas: {{ .Values.proxy.pgBouncer.replicas }}
      # these resources are for the "pgbouncer" container in the "postgres-crunchy-ha-pgbouncer" set of pods
      # there is a sidecar in these pods which are not mentioned here, but the requests/limits are teeny weeny by default so no worries there.
      resources:
        requests:
          cpu: {{ .Values.proxy.pgBouncer.requests.cpu }}
          memory: {{ .Values.proxy.pgBouncer.requests.memory }}
        limits:
          cpu: {{ .Values.proxy.pgBouncer.limits.cpu }}
          memory: {{ .Values.proxy.pgBouncer.limits.memory }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                topologyKey: topology.kubernetes.io/zone
                labelSelector:
                  matchLabels:
                    postgres-operator.crunchydata.com/cluster:
                      {{ .Values.instances.name }}
                    postgres-operator.crunchydata.com/role: pgbouncer
